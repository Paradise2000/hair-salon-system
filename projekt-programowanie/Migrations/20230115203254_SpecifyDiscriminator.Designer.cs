// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projekt_programowanie.Entities;

#nullable disable

namespace projektprogramowanie.Migrations
{
    [DbContext(typeof(ProjektDbContext))]
    [Migration("20230115203254_SpecifyDiscriminator")]
    partial class SpecifyDiscriminator
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projekt_programowanie.Entities.BookedVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.Property<bool>("isCancelled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkerId");

                    b.ToTable("BookedVisits");
                });

            modelBuilder.Entity("projekt_programowanie.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ServiceDuration")
                        .HasColumnType("time");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ServicePrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("projekt_programowanie.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Role").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("projekt_programowanie.Entities.WorkerAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkersAvailabilities");
                });

            modelBuilder.Entity("projekt_programowanie.Entities.Client", b =>
                {
                    b.HasBaseType("projekt_programowanie.Entities.User");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("projekt_programowanie.Entities.Worker", b =>
                {
                    b.HasBaseType("projekt_programowanie.Entities.User");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("projekt_programowanie.Entities.BookedVisit", b =>
                {
                    b.HasOne("projekt_programowanie.Entities.Client", "Client")
                        .WithMany("BookedVisits")
                        .HasForeignKey("ClientId");

                    b.HasOne("projekt_programowanie.Entities.Service", "Service")
                        .WithMany("BookedVisits")
                        .HasForeignKey("ServiceId");

                    b.HasOne("projekt_programowanie.Entities.Worker", "Worker")
                        .WithMany("BookedVisits")
                        .HasForeignKey("WorkerId");

                    b.Navigation("Client");

                    b.Navigation("Service");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("projekt_programowanie.Entities.WorkerAvailability", b =>
                {
                    b.HasOne("projekt_programowanie.Entities.Worker", "Worker")
                        .WithMany("WorkersAvailabilities")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("projekt_programowanie.Entities.Service", b =>
                {
                    b.Navigation("BookedVisits");
                });

            modelBuilder.Entity("projekt_programowanie.Entities.Client", b =>
                {
                    b.Navigation("BookedVisits");
                });

            modelBuilder.Entity("projekt_programowanie.Entities.Worker", b =>
                {
                    b.Navigation("BookedVisits");

                    b.Navigation("WorkersAvailabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
